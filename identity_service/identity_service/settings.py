"""
Django settings for identity_service project.

Generated by 'django-admin startproject' using Django 1.11.13.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

import djcelery
# djcelery.setup_loader()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$i*l4c^0t!-1v&ctq4ow%qboc(t8&f0p2pun_pmmh1&o8lmlxn'


BROKER_USE_SSL = True

# # For 'redis'
# CELERY_BROKER_URL           = 'redis://localhost:6379'
# CELERY_RESULT_BACKEND       = 'django-db'

# # For 'rabbitmq'
# broker='amqp://kiran:kiran@localhost/vhost'
# backend='rpc://',

CELERY_RESULT_PERSISTENT    = True
CELERY_ACCEPT_CONTENT       = ['application/json']
CELERY_TASK_SERIALIZER      = 'json'
CELERY_RESULT_SERIALIZER    = 'json'
CELERY_ENABLE_UTC           = True
CELERYBEAT_SCHEDULER        = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERYD_TASK_SOFT_TIME_LIMIT = 60

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

	# 'django.contrib.sites.models.Site',
    # 'django_celery_results',
	# 'django_extensions',
	'bootstrap3',
	'widget_tweaks',
	'jquery',
	# 'django_celery_beat',
	'rest_framework',
    # 'djcelery',

    'identity_service',
	'login',

	# 'djcelery_email',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Email Configuration Setting
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'testqashack@gmail.com'
EMAIL_HOST_PASSWORD = 'testqashack@123'
EMAIL_USE_TLS = True

# For Emails from SMTP SERVER
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

ROOT_URLCONF = 'identity_service.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS'   : [os.path.join(BASE_DIR, '.', 'templates')],
		'OPTIONS': {
			'context_processors': [
				'constance.context_processors.config',
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
			'loaders'           : [
				'apptemplates.Loader',
				'django.template.loaders.filesystem.Loader',
				'django.template.loaders.app_directories.Loader',
				'admin_tools.template_loaders.Loader',
			],
		},
	},
]


AUTHENTICATION_BACKENDS = (
	'django.contrib.auth.backends.ModelBackend',
	'allauth.account.auth_backends.AuthenticationBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}


WSGI_APPLICATION = 'identity_service.wsgi.application'

# Database name is 'Postgres'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'identity_service',
        'USER': 'postgres',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}
# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


#Create a log file and store the data

LOGGING = {
	'version'                 : 1,
	'disable_existing_loggers': False,

	'filters' : {
		'require_debug_false' :{
			'()' : 'django.utils.log.RequireDebugFalse',
		},
		'require_debug_true' :{
			'()' : 'django.utils.log.RequireDebugTrue',
		},
	},

	'formatters'              : {
		'console': {
			# exact format is not important, this is the minimum information
			'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
		},
	},

	# If it throws any errors the logs are saved in the file 'log_details.log' file under the main project structure
	'handlers'                : {
		'console': {
			'class'    : 'logging.StreamHandler',
			'formatter': 'console',
		},
		'file' : {
			'level' : 'DEBUG',
			'class' : 'logging.FileHandler',
			'filename' : 'log_details.log',
			},
	},

	'mail_admins' : {
		'level' : 'ERROR',
		'filters' : ['require_debug_false'],
		'class' : 'django.utils.log.AdminEmailHandler'
	},

	'loggers' : {
		'django' :{
			'level': 'DEBUG',
			# 'handlers': ['console', 'file'],
			'handlers': ['file'],
		},
	},
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
# djcelery.setup_loader()
